swagger: "2.0"
info:
  description: "Multi-Agent Pathfinding for Autonome Palleløftere på Transitlagre"
  version: "1.0.0"
  title: "Planlægningssystem"
  #termsOfService: "http://swagger.io/terms/"
  contact:
    email: "dat2c1-18@student.aau.dk"
  #license:
  #  name: "Apache 2.0"
  #  url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "https://github.com/msan19/P2"
#basePath: "/v2"


schemes:
- "http"
paths:
  /warehouse:
    get:
      summary: "Get warehouse"
      description: ""
      operationId: "GetWarehouse"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Warehouse"
        500:
          description: "Warehouse info not yet received"
    post:
      summary: "Update system's graph for warehouse"
      description: ""
      operationId: "PostWarehouse"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "warehouse"
        #description: "Object for warehouse"
        required: true
        schema:
          $ref: "#/definitions/Warehouse"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid Warehouse"
        401:
          description: "Invalid Graph"
  /routes:
    get:
      summary: "Returns all locked routes"
      description: ""
      operationId: "GetRoutes"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Route"

  /orders:
    get:
      summary: "Returns all queued orders"
      description: ""
      operationId: "GetOrders"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Route"
    put:
      summary: "Add an order to the system"
      description: ""
      operationId: "AddOrder"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "order"
        description: "An order to be queued"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid order"

  /orders/{guid}:
    get:
      summary: "Get details for a single order"
      description: ""
      operationId: "GetOrder"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "guid"
        type: "string"
        format: "URI-encoded"
        description: "URI-encoded identifier for the order"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Route"
        400:
          description: "Order not found"
  /forklifts:
    get:
      summary: "Returns all known forklifts"
      description: ""
      operationId: "GetForklifts"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/ForkliftInfo"
    post:
      summary: "Forklift posts status to server"
      description: ""
      operationId: "PostForklift"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "graph"
        description: "Graph object for warehouse"
        required: true
        schema:
          $ref: "#/definitions/Graph"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid forklift"
  /forklifts/{guid}:
    get:
      summary: "Get details for a single forklift"
      description: ""
      operationId: "GetForklift"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "guid"
        type: "string"
        format: "URI-encoded"
        description: "URI-encoded identifier for the forklift"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ForkliftInfo"
        400:
          description: "Forklift not found"
          
  /forklifts/{guid}/initiate:
    post:
      summary: "Forklift connects to server"
      description: ""
      operationId: "InitiateForklift"
      consumes:
      - "application/json"
      parameters:
      - in: "path"
        name: "guid"
        type: "string"
        format: "URI-encoded"
        description: "URI-encoded ID unique for physical forklift"
        required: true
      - in: "body"
        name: "forklift"
        description: "Forklift details"
        required: true
        schema:
          $ref: "#/definitions/ForkliftInfo"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid forklift"
        401:
          description: "Forklift already initiated"

    
definitions:
  Vector2:
    type: "object"
    required:
      - "x"
      - "y"
    properties:
      x:
        type: "number"
        format: "decimal"
        example: 10
      y:
        type: "number"
        format: "decimal"
        example: 14.5
  Date:
    type: "number"
    format: "Miliseconds since 1970-01-01 00:00:00 UTC"
    example: "1584965558174"

  Node:
    type: "object"
    required:
      - "id"
      - "position"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 0
      label:
        type: "string"
        example: "Delivery"
      position:
        type: "object"
        $ref: "#/definitions/Vector2"
  Edge:
    type: "object"
    required:
      - "nodeId_1"
      - "nodeId_2"
    properties:
      nodeId_1: 
        type: "string"
        example: "0"
      nodeId_2: 
        type: "string"
        example: "1"
      label:
        type: "string"
        example: "Optional Label"
        
  Graph:
    type: "object"
    required:
    - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/Node"
      Edges:
        type: "array"
        items:
          $ref: "#/definitions/Edge"

  Warehouse:
    type: "object"
    properties:
      graph:
        $ref: "#/definitions/Graph"
      forkliftMovementSpeed:
        type: "number"
        format: "Meters per second"
        example: "3.4"

  PalletInfo:
    type: "object"
    required:
      - "id"
    properties:
      id:
        type: "string"
        format: "guid"
        description: "Unique identifier for the pallet"
        example: "{1751227a-e9b9-4d37-912f-cdbea5e6fe90}"
      mass:
        type: "number"
        description: "Pallet mass in kilogram"

  ForkliftInfo:
    type: "object"
    required:
      - "guid"
    properties:
      guid:
        type: "string"
        #format: "guid"
        description: "ID unique to the physical forklift"
        example: "{e00af90a-6645-4be4-9153-bb1d6e44bbba}"
      batteryStatus:
        type: "integer"
        description: "Remaining battery capacity in percentage"
        example: 78
      position:
        type: "object"
        $ref: "#/definitions/Vector2"
        description: "Physical location of forklift within warehouse"
        ###TODO: Should this be a node?
          ### If so, then how about when the forklift is moving between nodes?
      state:
        type: "string"
        description: ""
        enum:
          - "idle"
          - "hasOrder"
          - "charging"
      hasPallet:
        type: "boolean"

  ForkliftInstruction:
    type: "object"
    required:
      - "type"
    properties:
      type:
        type: "string"
        enum:
          - "move"
          - "wait"
          - "unloadPallet"
          - "loadPallet"
          - "charge"
      node:
        $ref: "#/definitions/Node"

  Route:
    type: "object"
    required:
      - "id"
      - "instructions"
    properties:
      id:
        type: "string"

      instructions:
        type: "array"
        items:
          $ref: "#/definitions/ForkliftInstruction"

  Order:
    type: "object"
    required:
      - "orderType"
    properties:
      orderType:
        type: "string"
        enum:
          - "movePallet"
          - "moveForklift"
          - "charge"
      forkliftId:
        type: "string"
      palletId:
        type: "string"
      startNode:
        $ref: "#/definitions/Node"
      endNode:
        $ref: "#/definitions/Node"

    
    

externalDocs:
  description: "Find out more about Swagger"
  url: "https://github.com/msan19/P2"